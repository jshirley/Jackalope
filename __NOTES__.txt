
= TODOS =

- we should be doing content-length stuff everywhere too
- perhaps centralize all the content-type handling too
- perhaps put all this plack fiddling into Jackalope::Util (or Jackalope::REST::Util)

- ponder removing "rel" from the linkrel, it might be best implied
  from the object key instead, hard to really say.

- Jackalope::REST::Service
    - this should check the result in to_app to
      look for errors and wrap them up in our
      exception objects accordingly

- Jackalope::REST::Service::Directory
    - this could also encapsulate a media-type of some kind
      because it would have multiple schemas in it
    - this should collect services and key them by schema->id
      and then the services should have access to them, this
      should simplify some of the 030-multi-schema-service.t stuff
      by allowing the resource/ref stuff to find the correct
      resource-repository for us
    - this perhaps should also handle described-by (see below)

- Jackalope::REST::Service::Target::
    - consider stuffing the describedby schema URL into the "Link" header (ex: `Link: </schema>; rel="describedby";`)
        - perhaps we do this with OPTIONS request?
    - Jackalope::REST::Service::Target::DescribedBy
        - this has been removed it should be made part of a Schema::Directory
          object so that it serves schemas as well as the services, but only
          optionally.
            - the described-by relation should probably return a more
              complete (compiled) schema, and any referenced schemas
              should have their complete URIs, not just the reference,
              something like:
                {
                    id   => 'some/schema/foo',
                    type => "object",
                    properties => {
                        name => { type => 'string' },
                        thing => { rel => 'describedby', href => 'bar/schema', method => 'GET' },
                        ....
                    }
                }
              this way you can get a schema, which itself might refer
              to other schemas, and you can follow those hyperlinks to
              get to those other schemas if you want/need.
              Ideally though, this is like the compiled schema, only
              with the ref replacement step hijacked.

- Jackalope::REST::Client
    - write it
    - set of actions
        - download schema
            - download any links schemas
        - analyze schema for possible steps/entry points
            - construct URLs for those
        - then we just tell the object to
          perform some actions
            - send message, validate message
            - get response, validate result
            - etc.
    - should be possible to script one of these
      objects, a Jackalope::REST::Client::Harness
      of sorts, it could take a JSON state machine
      as input.

- Jackalope::REST::Service
    - look into Plack::Middleware::MethodOverride
    - might want to return 412 Precondition Failed when delete If-Matches fails
    - Caching options
        - we should support eTags
    - Media (binary data)
        - see: http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php#media-link-entries


- Jackalope::REST::Resource::Repository
    - not sure I really like having to return NotImplmented in the
      repo subclass in 030-multi-schema-service.t, it would be nice
      if we could compose this more such that I don't have to have
      it if I don't want it.
    - &list should optionally take some parameters
        - search term(s)
        - start/end for paging of results
        - add this to the corresponding schema/web/service as well
    - Resource wrapper notes
        - the version string is a SHA1 of the content, so that we can
          take advantage of ETags
            - read up on http://en.wikipedia.org/wiki/HTTP_ETag

- ponder spliting things up
    - Jackalope
    - Jackalope::Web::REST
    - Jackalope::JS
        - the reasoning being that some parts are
          more opinionated then others and it would
          be nice to give people flexibility

- think about renaming the schema URIs
  to something more sensible, like ...
    - jackalope/core/ref
    - jackalope/core/type/any, etc...
    - jackalope/core/hypermedia/linkrel
    - jackalope/core/hypermedia/hyperlink
    - jackalope/web/rest/resource
    - jackalope/web/rest/service

== KNOWN ISSUES ==

- Jackalope::Schema::Respository
    - extending a self referencing schema in a properties is not allowed
      but you can do it in links, so something like this ...
          {
            id => "foo/schema",
            properties => {
                bar => { extends => { $ref => "#" } }
            }
          }
      will not work correctly because it would lead to a circular loop.
      However, this does work:
          {
            id => "foo/schema",
            properties => {
                bar => { $ref => "#" }
            }
          }
      the solution is to make another schema for 'bar' excplictly, however
      we do not properly throw an error now, which is bad.

== LOW PRIORITY ==

- Jackalope::Schema::Repository
    - we should be able to serialize the compiled_schemas to disk
      and then be able to load them instead of compiling them all
      might save on some of the startup overhead

- Jackalope.js
    - add some kind of basic Bread-Board type thing

- Jackalope::Schema::Spec & Jackalope.Schema.Spec
    - perhaps use that description cleanup method in GenerateSpec on the actual spec

- Test::Jackalope & Test.Jackalope
    - validation_fail should also take some kind of
      test to check the right error appears
        - fixtures will need to support this too

- test_fixtures
    - write more of them

- Jackalope::Schema::Validator::Core
    - make it use Moose types to check against
    - possibly just compile them down to faster subs or something

- Jackalope::Serializer
    - Jackalope::Serializer::XML (TODO - perigrin)
    - Jackalope::Serializer::YAML (why??)

== PERHAPS ==

- Jackalope::API::*
    - create a set of roles that can be used
      in the Bread::Board config to typemap
      to concrete classes
    - NOTE: I tried this, it didn't feel right
      but should keep the idea around just in case

== LINKS ==


http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
http://en.wikipedia.org/wiki/Representational_State_Transfer
http://martinfowler.com/articles/richardsonMaturityModel.html
http://code.msdn.microsoft.com/cannonicalRESTEntity
http://www.w3.org/TR/xforms/
http://thisweekinrest.wordpress.com/
http://tools.ietf.org/html/rfc5988
http://alexscordellis.blogspot.com/2010/11/restful-architecture-what-should-we-put.html
http://restinpractice.com/default.aspx

- ATOM
    - http://www.atomenabled.org/

- LINK relations
    - http://www.iana.org/assignments/link-relations/link-relations.xhtml

- HTTP status codes
    - https://demo.staging.fellowshiponeapi.com/v1/Util/HttpStatusCodes.help




